---
import ReviewCardV2 from "./ReviewCardV2.astro";
import type { ReviewWithData } from "@/lib/types";

interface Props {
  reviewsWithData: ReviewWithData[];
  initialCount?: number;
}

const { reviewsWithData, initialCount = 24 } = Astro.props;

// Extract unique values for filter options
const availableAuthors = [...new Set(reviewsWithData.map((r) => r.author.data.name))].sort();
const availableMoods = [...new Set(reviewsWithData.map((r) => r.review.data.mood))].sort();
const availableBrands = [...new Set(reviewsWithData.map((r) => r.tool.data.brand))].sort();

// Get initial visible reviews
const initialReviews = reviewsWithData.slice(0, initialCount);
---

<div id="masonry-wall-v2">
  <!-- Filter Controls -->
  <div class="sticky top-0 z-10 border-b border-bunnings-neutral-light-gray bg-white/80 py-4 backdrop-blur-md">
    <div class="mx-auto max-w-7xl px-4">
      <div class="flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between">
        
        <!-- Search -->
        <div class="relative max-w-md flex-1">
          <input
            type="text"
            id="search-input"
            placeholder="Search reviews, authors, or tools..."
            class="w-full rounded-lg border border-bunnings-neutral-medium-gray px-4 py-2 text-sm focus:border-bunnings-secondary-green focus:ring-1 focus:ring-bunnings-secondary-green focus:outline-none"
          />
          <button
            id="clear-search"
            class="absolute inset-y-0 right-0 hidden items-center pr-3 text-bunnings-neutral-medium-gray hover:text-bunnings-neutral-charcoal"
            aria-label="Clear search"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>

        <!-- Filter Dropdowns -->
        <div class="flex flex-wrap gap-2">
          <select
            id="author-filter"
            class="rounded-md border border-bunnings-neutral-medium-gray px-3 py-1 text-sm focus:border-bunnings-secondary-green focus:outline-none"
          >
            <option value="">All Authors</option>
            {availableAuthors.map((author) => (
              <option value={author}>{author}</option>
            ))}
          </select>

          <select
            id="mood-filter"
            class="rounded-md border border-bunnings-neutral-medium-gray px-3 py-1 text-sm focus:border-bunnings-secondary-green focus:outline-none"
          >
            <option value="">All Moods</option>
            {availableMoods.map((mood) => (
              <option value={mood}>{mood.charAt(0).toUpperCase() + mood.slice(1)}</option>
            ))}
          </select>

          <select
            id="brand-filter"
            class="rounded-md border border-bunnings-neutral-medium-gray px-3 py-1 text-sm focus:border-bunnings-secondary-green focus:outline-none"
          >
            <option value="">All Brands</option>
            {availableBrands.map((brand) => (
              <option value={brand}>{brand}</option>
            ))}
          </select>

          <select
            id="sort-filter"
            class="rounded-md border border-bunnings-neutral-medium-gray px-3 py-1 text-sm focus:border-bunnings-secondary-green focus:outline-none"
          >
            <option value="balanced">Sort by: Balanced Mix</option>
            <option value="newest">Sort by: Newest</option>
            <option value="oldest">Sort by: Oldest</option>
            <option value="author-asc">Sort by: Author (A-Z)</option>
            <option value="author-desc">Sort by: Author (Z-A)</option>
            <option value="brand-asc">Sort by: Brand (A-Z)</option>
            <option value="brand-desc">Sort by: Brand (Z-A)</option>
          </select>
        </div>
      </div>

      <!-- Results Count -->
      <div class="mt-2">
        <p id="results-count" class="text-sm text-bunnings-neutral-medium-gray">
          Showing {initialReviews.length} of {reviewsWithData.length} reviews
        </p>
      </div>
    </div>
  </div>

  <!-- Masonry Grid -->
  <div class="mx-auto max-w-7xl px-4 py-8">
    <div id="no-results" class="hidden min-h-96 flex items-center justify-center">
      <div class="text-center">
        <p class="mb-2 text-lg text-bunnings-neutral-medium-gray">
          No reviews match your filters
        </p>
        <p class="text-sm text-bunnings-neutral-light-gray">
          Try adjusting your search criteria
        </p>
      </div>
    </div>
    
    <div id="masonry-grid" class="columns-1 gap-6 lg:columns-3 xl:columns-4">
      {initialReviews.map(({ review, author, tool }) => (
        <div class="review-item mb-6 block break-inside-avoid" 
             data-author={author.data.name}
             data-mood={review.data.mood}
             data-brand={tool.data.brand}
             data-search={`${author.data.name} ${tool.data.name} ${tool.data.brand} ${review.data.excerpt}`.toLowerCase()}>
          <ReviewCardV2
            slug={review.data.slug}
            toolId={tool.id}
            toolBrand={tool.data.brand}
            toolName={tool.data.name}
            toolImage={tool.data.thumbnailUrl}
            authorName={author.data.name}
            excerpt={review.data.excerpt}
          />
        </div>
      ))}
    </div>
  </div>

  <!-- Load More Button -->
  <div id="load-more-container" class="pb-16 text-center">
    <button
      id="load-more-btn"
      class="bg-bunnings-primary-orange hover:bg-bunnings-secondary-green text-black hover:text-white font-medium px-8 py-3 rounded-lg transition-all duration-300 shadow-sm hover:shadow-md"
    >
      Load More Reviews
    </button>
  </div>
</div>

<!-- Hidden data for JavaScript -->
<script type="application/json" id="reviews-data">
{JSON.stringify(reviewsWithData)}
</script>

<script is:inline>
  // Progressive enhancement JavaScript
  document.addEventListener('DOMContentLoaded', function() {
    const reviewsDataElement = document.getElementById('reviews-data');
    if (!reviewsDataElement) return;
    
    const reviewsData = JSON.parse(reviewsDataElement.textContent || '[]');
    const masonryGrid = document.getElementById('masonry-grid');
    const noResults = document.getElementById('no-results');
    const resultsCount = document.getElementById('results-count');
    const loadMoreBtn = document.getElementById('load-more-btn');
    const loadMoreContainer = document.getElementById('load-more-container');
    
    // Early return if essential elements are missing
    if (!masonryGrid || !noResults || !resultsCount || !loadMoreContainer) return;
    
    let filteredReviews = [...reviewsData];
    let visibleCount = 24;
    
    // Filter and search functionality
    const searchInput = document.getElementById('search-input');
    const authorFilter = document.getElementById('author-filter');
    const moodFilter = document.getElementById('mood-filter');
    const brandFilter = document.getElementById('brand-filter');
    const sortFilter = document.getElementById('sort-filter');
    const clearSearch = document.getElementById('clear-search');
    
    function updateURL() {
      const params = new URLSearchParams();
      if (searchInput.value) params.set('search', searchInput.value);
      if (authorFilter.value) params.set('author', authorFilter.value);
      if (moodFilter.value) params.set('mood', moodFilter.value);
      if (brandFilter.value) params.set('brand', brandFilter.value);
      if (sortFilter.value && sortFilter.value !== 'balanced') params.set('sort', sortFilter.value);
      
      const queryString = params.toString();
      const newUrl = queryString ? `${window.location.pathname}?${queryString}` : window.location.pathname;
      window.history.pushState({}, '', newUrl);
    }
    
    function initializeFromURL() {
      const params = new URLSearchParams(window.location.search);
      searchInput.value = params.get('search') || '';
      authorFilter.value = params.get('author') || '';
      moodFilter.value = params.get('mood') || '';
      brandFilter.value = params.get('brand') || '';
      sortFilter.value = params.get('sort') || 'balanced';
      
      if (clearSearch) clearSearch.style.display = searchInput.value ? 'flex' : 'none';
    }
    
    function filterAndSort() {
      // Filter reviews
      filteredReviews = reviewsData.filter((item) => {
        const { review, author, tool } = item;
        
        // Search filter
        if (searchInput.value) {
          const searchTerm = searchInput.value.toLowerCase();
          const searchableText = `${author.data.name} ${tool.data.name} ${tool.data.brand} ${review.data.excerpt}`.toLowerCase();
          if (!searchableText.includes(searchTerm)) return false;
        }
        
        // Other filters
        if (authorFilter.value && author.data.name !== authorFilter.value) return false;
        if (moodFilter.value && review.data.mood !== moodFilter.value) return false;
        if (brandFilter.value && tool.data.brand !== brandFilter.value) return false;
        
        return true;
      });
      
      // Sort reviews
      switch (sortFilter.value) {
        case 'newest':
          filteredReviews.sort((a, b) => new Date(b.review.data.dateCreated).getTime() - new Date(a.review.data.dateCreated).getTime());
          break;
        case 'oldest':
          filteredReviews.sort((a, b) => new Date(a.review.data.dateCreated).getTime() - new Date(b.review.data.dateCreated).getTime());
          break;
        case 'author-asc':
          filteredReviews.sort((a, b) => a.author.data.name.localeCompare(b.author.data.name));
          break;
        case 'author-desc':
          filteredReviews.sort((a, b) => b.author.data.name.localeCompare(a.author.data.name));
          break;
        case 'brand-asc':
          filteredReviews.sort((a, b) => a.tool.data.brand.localeCompare(b.tool.data.brand));
          break;
        case 'brand-desc':
          filteredReviews.sort((a, b) => b.tool.data.brand.localeCompare(a.tool.data.brand));
          break;
        // 'balanced' maintains original order
      }
      
      visibleCount = 24; // Reset visible count
      renderReviews();
      updateURL();
    }
    
    function renderReviews() {
      const visibleReviews = filteredReviews.slice(0, visibleCount);
      
      if (filteredReviews.length === 0) {
        masonryGrid.style.display = 'none';
        noResults.style.display = 'flex';
        loadMoreContainer.style.display = 'none';
      } else {
        masonryGrid.style.display = 'block';
        noResults.style.display = 'none';
        
        // This is a simplified approach - in a real implementation,
        // you'd want to regenerate the HTML or use a more sophisticated approach
        masonryGrid.innerHTML = visibleReviews.map(({ review, author, tool }) => 
          `<div class="review-item mb-6 block break-inside-avoid">
             <a href="/tool/${tool.id}?review=${review.data.slug}" class="review-card-v2 group block w-full text-left">
               <div class="border-2 border-bunnings-neutral-medium-gray rounded-lg bg-white p-6 transition-all duration-300 hover:border-bunnings-secondary-green hover:shadow-xl">
                 <div class="mb-4 flex justify-center">
                   <img src="${tool.data.thumbnailUrl.src}" alt="${tool.data.brand} ${tool.data.name}" class="h-20 w-20 rounded-lg border border-bunnings-neutral-light-gray object-cover" width="80" height="80" loading="lazy" />
                 </div>
                 <div class="mb-4 text-center">
                   <h3 class="text-bunnings-neutral-charcoal mb-1 text-lg font-semibold line-clamp-2">${tool.data.name}</h3>
                   <p class="text-bunnings-neutral-medium-gray text-sm">${tool.data.brand}</p>
                 </div>
                 <p class="text-bunnings-neutral-dark-gray text-sm leading-relaxed mb-4">${review.data.excerpt}</p>
                 <div class="text-center border-t border-bunnings-neutral-light-gray pt-3">
                   <span class="text-bunnings-neutral-medium-gray text-sm">by ${author.data.name}</span>
                 </div>
               </div>
             </a>
           </div>`
        ).join('');
        
        // Show/hide load more button
        loadMoreContainer.style.display = visibleCount < filteredReviews.length ? 'block' : 'none';
      }
      
      // Update results count
      resultsCount.textContent = `Showing ${visibleReviews.length} of ${filteredReviews.length} reviews${filteredReviews.length !== reviewsData.length ? ' (filtered)' : ''}`;
    }
    
    function loadMore() {
      visibleCount += 24;
      renderReviews();
    }
    
    // Event listeners
    if (searchInput) {
      searchInput.addEventListener('input', function() {
        if (clearSearch) clearSearch.style.display = this.value ? 'flex' : 'none';
        filterAndSort();
      });
    }
    
    if (clearSearch && searchInput) {
      clearSearch.addEventListener('click', function() {
        searchInput.value = '';
        this.style.display = 'none';
        filterAndSort();
      });
    }
    
    [authorFilter, moodFilter, brandFilter, sortFilter].forEach(filter => {
      if (filter) filter.addEventListener('change', filterAndSort);
    });
    
    if (loadMoreBtn) loadMoreBtn.addEventListener('click', loadMore);
    
    // Initialize from URL
    initializeFromURL();
    if (new URLSearchParams(window.location.search).toString()) {
      filterAndSort();
    }
  });
</script> 
