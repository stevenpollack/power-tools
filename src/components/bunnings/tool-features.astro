---
interface Props {
  features: string[];
  description?: string;
  className?: string;
}

const { features, description, className } = Astro.props;
---

<div class={`features-container ${className || ""}`}>
  {description && <p class="features-description">{description}</p>}

  <ul class="features-list">
    {
      features.map((feature) => (
        <li class="feature-item">
          <svg
            class="check-icon"
            width="16"
            height="16"
            viewBox="0 0 16 16"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M13.5 4.5L6 12L2.5 8.5"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            />
          </svg>
          <span>{feature}</span>
        </li>
      ))
    }
  </ul>
</div>

<style>
  .features-container {
    margin-bottom: 1rem;
  }

  .features-description {
    font-size: 16px;
    color: rgb(51, 51, 51);
    line-height: 1.6;
    margin-bottom: 1rem;
  }

  .features-list {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .feature-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    font-size: 16px;
    color: rgb(51, 51, 51);
    line-height: 1.6;
    margin-bottom: 0.75rem;
  }

  .feature-item:last-child {
    margin-bottom: 0;
  }

  .check-icon {
    color: rgb(13, 82, 87);
    margin-top: 0.125rem;
    flex-shrink: 0;
  }
</style>
